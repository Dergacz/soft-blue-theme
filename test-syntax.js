// üé® –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã Soft Blue Theme

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
 * @param {string} name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} age - –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function greetUser(name, age) {
    const greeting = `–ü—Ä–∏–≤–µ—Ç, ${name}! –¢–µ–±–µ ${age} –ª–µ—Ç.`;
    console.log(greeting);
    
    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (age >= 18) {
        return "–í—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π";
    } else {
        return "–í—ã –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π";
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class User {
    constructor(name, email) {
        this.name = name;
        this.email = email;
        this.isActive = true;
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    getInfo() {
        return {
            name: this.name,
            email: this.email,
            status: this.isActive ? 'active' : 'inactive'
        };
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
    static validateEmail(email) {
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return regex.test(email);
    }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const user1 = new User("–ê–Ω–Ω–∞", "anna@example.com");
const user2 = new User("–ú–∞–∫—Å–∏–º", "maxim@test.ru");

// –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = [user1, user2];

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–∞
const activeUsers = users
    .filter(user => user.isActive)
    .map(user => user.getInfo())
    .sort((a, b) => a.name.localeCompare(b.name));

console.log("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", activeUsers);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fetchUserData(userId) {
    try {
        const response = await fetch(`/api/users/${userId}`);
        const userData = await response.json();
        return userData;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
}

// –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∏ spread –æ–ø–µ—Ä–∞—Ç–æ—Ä
const { name, email } = user1.getInfo();
const newUser = { ...user1.getInfo(), lastLogin: new Date() };

// –ß–∏—Å–ª–∞ –∏ —Å—Ç—Ä–æ–∫–∏
const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((acc, num) => acc + num, 0);
const average = sum / numbers.length;

console.log(`–°—É–º–º–∞: ${sum}, –°—Ä–µ–¥–Ω–µ–µ: ${average.toFixed(2)}`);

// RegExp –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
const phoneRegex = /^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$/;
const testPhone = "+7(999)123-45-67";

if (phoneRegex.test(testPhone)) {
    console.log("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω");
} else {
    console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞");
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
export { User, greetUser, fetchUserData };
export default User;
